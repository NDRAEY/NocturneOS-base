use alloc::string::String;
use noct_pci::BARType;
use noct_pci::PCIDevice;
use noct_tty::{print, println};

use super::ShellContext;

const PCI_DEVICE_TYPE_STRINGS: [(u8, u8, &str); 89] = [
    (0x00, 0x00, "Неизвестное устройство"),
    (0x00, 0x01, "VGA-совместимое устройство"),
    (0x01, 0x00, "Контроллер шины SCSI"),
    (0x01, 0x01, "IDE-контроллер"),
    (0x01, 0x02, "Контроллер гибких дисков"),
    (0x01, 0x03, "Контроллер шины IPI"),
    (0x01, 0x04, "RAID-контроллер"),
    (0x01, 0x05, "Контроллер АТА"),
    (0x01, 0x06, "SATA-контроллер"),
    (0x01, 0x07, "Последовательный подключенный контроллер SCSI"),
    (0x01, 0x80, "Другой контроллер запоминающих устройств"),
    (0x02, 0x00, "Ethernet-контроллер"),
    (0x02, 0x01, "Контроллер Token Ring"),
    (0x02, 0x02, "FDDI-контроллер"),
    (0x02, 0x03, "Контроллер банкомата"),
    (0x02, 0x04, "ISDN-контроллер"),
    (0x02, 0x05, "Контроллер WorldFip"),
    (0x02, 0x06, "PICMG 2.14 Мультивычисления"),
    (0x02, 0x80, "Другой сетевой контроллер"),
    (0x03, 0x00, "VGA-совместимый контроллер"),
    (0x03, 0x01, "XGA-контроллер"),
    (0x03, 0x02, "3D контроллер"),
    (0x03, 0x80, "Другой контроллер дисплея"),
    (0x04, 0x00, "Видео-устройство"),
    (0x04, 0x01, "Аудио-устройство"),
    (0x04, 0x02, "Компьютерное телефонное устройство"),
    (0x04, 0x03, "Аудио-устройство (4.3)"),
    (0x04, 0x80, "Другое мультимедийное устройство"),
    (0x05, 0x00, "Контроллер оперативной памяти"),
    (0x05, 0x01, "Флэш-контроллер"),
    (0x05, 0x80, "Другой контроллер памяти"),
    (0x06, 0x00, "Хост-мост"),
    (0x06, 0x01, "ISA мост"),
    (0x06, 0x02, "EISA мост"),
    (0x06, 0x03, "MCA мост"),
    (0x06, 0x04, "PCI-to-PCI мост"),
    (0x06, 0x05, "PCMCIA мост"),
    (0x06, 0x06, "NuBus мост"),
    (0x06, 0x07, "CardBus мост"),
    (0x06, 0x08, "RACEWay мост"),
    (0x06, 0x09, "PCI-to-PCI мост (Полупрозрачный)"),
    (0x06, 0x0A, "Хост-мост InfiniBand-PCI"),
    (0x06, 0x80, "Другое устройство моста"),
    (0x07, 0x00, "Последовательный контроллер"),
    (0x07, 0x01, "Параллельный порт"),
    (0x07, 0x02, "Многопортовый последовательный контроллер"),
    (0x07, 0x03, "Универсальный модем"),
    (0x07, 0x04, "IEEE 488.1/2 (GPIB) контроллер"),
    (0x07, 0x05, "Интеллектуальная карточка"),
    (0x07, 0x80, "Другое устройство связи"),
    (0x08, 0x00, "Программируемый контроллер прерываний"),
    (0x08, 0x01, "Контроллер прямого доступа к памяти"),
    (0x08, 0x02, "Системный таймер"),
    (0x08, 0x03, "Часы реального времени"),
    (0x08, 0x04, "Универсальный контроллер PCI (hot-plug)"),
    (0x08, 0x80, "Другая системная периферия"),
    (0x09, 0x00, "Контроллер клавиатуры"),
    (0x09, 0x01, "Цифровой преобразователь"),
    (0x09, 0x02, "Контроллер мыши"),
    (0x09, 0x03, "Контроллер сканера"),
    (0x09, 0x04, "Контроллер игрового порта"),
    (0x09, 0x80, "Другой контроллер ввода"),
    (0x0A, 0x00, "Универсальная док-станция"),
    (0x0A, 0x80, "Другая док-станция"),
    (0x0B, 0x00, "Процессор i386"),
    (0x0B, 0x01, "Процессор i486"),
    (0x0B, 0x02, "Процессор Pentium"),
    (0x0B, 0x10, "Процессор Alpha"),
    (0x0B, 0x20, "Процессор PowerPC"),
    (0x0B, 0x30, "Процессор MIPS"),
    (0x0B, 0x40, "Со-процессор"),
    (0x0C, 0x00, "Контроллер FireWire"),
    (0x0C, 0x01, "Контроллер ACCESS.bus"),
    (0x0C, 0x02, "SSA Контроллер"),
    (0x0C, 0x03, "USB Контроллер"),
    (0x0C, 0x04, "Волоконный канал"),
    (0x0C, 0x05, "SMBus"),
    (0x0C, 0x06, "InfiniBand"),
    (0x0C, 0x07, "Интерфейс IPMI SMIC"),
    (0x0C, 0x08, "Интерфейс SERCOS"),
    (0x0C, 0x09, "Интерфейс CANbus"),
    (0x0D, 0x00, "iRDA-совместимый контроллер"),
    (0x0D, 0x01, "Потребительский ИК-контроллер"),
    (0x0D, 0x10, "RF Контроллер"),
    (0x0D, 0x11, "Bluetooth Контроллер"),
    (0x0D, 0x12, "Broadband Контроллер"),
    (0x0D, 0x20, "802.11a (Wi-Fi) Ethernet-контроллер"),
    (0x0D, 0x21, "802.11b (Wi-Fi) Ethernet-контроллер"),
    (0x0D, 0x80, "Другой беспроводной контроллер"),
];

pub static PCI_COMMAND_ENTRY: crate::ShellCommandEntry = ("pci", pci, Some("Lists PCI devices"));

pub fn pci(_context: &mut ShellContext, _args: &[&str]) -> Result<(), usize> {
    fn pci_print_nth(dev: &noct_pci::PCIDevice) {
        print!(
            "- {}:{}:{}:{}.{}: {:x}:{:x} -> {}",
            dev.class,
            dev.subclass,
            dev.bus,
            dev.slot,
            dev.function,
            dev.vendor,
            dev.device,
            PCI_DEVICE_TYPE_STRINGS
                .iter()
                .find(|x| x.0 == dev.class && x.1 == dev.subclass)
                .map(|a| a.2)
                .unwrap_or("Unknown")
        );

        if (dev.header_type & 0x80) == 0 {
            print!(" [Multifunc]");
        }

        print!("\nAddresses:");
        for i in 0..6 {
            let bar = dev.read_bar(i).unwrap();
            if bar.address == 0 {
                continue;
            }

            print!(
                "\n    BAR{i}: {} at {:08x} (size {})",
                if bar.bar_type == BARType::IO {
                    "IO"
                } else {
                    "Memory"
                },
                bar.address,
                bar.length
            );
        }

        println!();
    }

    let devices = noct_pci::devices();
    for dev in devices.iter() {
        pci_print_nth(dev);
    }

    Ok(())
}
