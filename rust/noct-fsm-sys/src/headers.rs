/* automatically generated by rust-bindgen 0.69.4 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const NULL: u32 = 0;
pub const KB: u32 = 1024;
pub const MB: u32 = 1048576;
pub const GB: u32 = 1073741824;
pub const FSM_MOD_READ: u32 = 1;
pub const FSM_MOD_WRITE: u32 = 2;
pub const FSM_MOD_EXEC: u32 = 4;
pub const FSM_TYPE_DIR: u32 = 5;
pub const FSM_TYPE_FILE: u32 = 0;
pub type size_t = u32;
pub type ssize_t = i32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct FSM_TIME {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct FSM_FILE {
    pub Ready: bool,
    pub Name: [core::ffi::c_char; 1024usize],
    pub Path: [core::ffi::c_char; 1024usize],
    pub Mode: core::ffi::c_int,
    pub Size: size_t,
    pub LastTime: FSM_TIME,
    pub Type: core::ffi::c_int,
    pub CHMOD: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct FSM_DIR {
    pub Ready: bool,
    pub CountFiles: size_t,
    pub CountDir: size_t,
    pub CountOther: size_t,
    pub Files: *const FSM_FILE,
}
pub type fsm_cmd_read_t = ::core::option::Option<
    unsafe extern "C" fn(
        letter: core::ffi::c_char,
        name: *const core::ffi::c_char,
        offset: size_t,
        count: size_t,
        buffer: *mut core::ffi::c_void,
    ) -> size_t,
>;
pub type fsm_cmd_write_t = ::core::option::Option<
    unsafe extern "C" fn(
        letter: core::ffi::c_char,
        arg1: *const core::ffi::c_char,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut core::ffi::c_void,
    ) -> size_t,
>;
pub type fsm_cmd_info_t = ::core::option::Option<
    unsafe extern "C" fn(letter: core::ffi::c_char, arg1: *const core::ffi::c_char) -> FSM_FILE,
>;
pub type fsm_cmd_dir_t = ::core::option::Option<
    unsafe extern "C" fn(
        letter: core::ffi::c_char,
        arg1: *const core::ffi::c_char,
        out: *mut FSM_DIR,
    ),
>;
pub type fsm_cmd_create_t = ::core::option::Option<
    unsafe extern "C" fn(
        letter: core::ffi::c_char,
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
    ) -> core::ffi::c_int,
>;
pub type fsm_cmd_delete_t = ::core::option::Option<
    unsafe extern "C" fn(
        letter: core::ffi::c_char,
        path: *const core::ffi::c_char,
        arg1: core::ffi::c_int,
    ) -> core::ffi::c_int,
>;
pub type fsm_cmd_label_t = ::core::option::Option<
    unsafe extern "C" fn(letter: core::ffi::c_char, buffer: *mut core::ffi::c_char),
>;
pub type fsm_cmd_detect_t =
    ::core::option::Option<unsafe extern "C" fn(letter: core::ffi::c_char) -> core::ffi::c_int>;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct FSM {
    pub Ready: bool,
    pub Name: [core::ffi::c_char; 64usize],
    pub Read: fsm_cmd_read_t,
    pub Write: fsm_cmd_write_t,
    pub Info: fsm_cmd_info_t,
    pub Dir: fsm_cmd_dir_t,
    pub Create: fsm_cmd_create_t,
    pub Delete: fsm_cmd_delete_t,
    pub Label: fsm_cmd_label_t,
    pub Detect: fsm_cmd_detect_t,
    pub Reserved: *mut core::ffi::c_void,
}
extern "C" {
    pub fn fsm_init();
}
extern "C" {
    pub fn fsm_getIDbyName(Name: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn fsm_read(
        FIndex: core::ffi::c_int,
        DIndex: core::ffi::c_char,
        Name: *const core::ffi::c_char,
        Offset: size_t,
        Count: size_t,
        Buffer: *mut core::ffi::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn fsm_write(
        FIndex: core::ffi::c_int,
        DIndex: core::ffi::c_char,
        Name: *const core::ffi::c_char,
        Offset: size_t,
        Count: size_t,
        Buffer: *mut core::ffi::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn fsm_info(
        FIndex: core::ffi::c_int,
        DIndex: core::ffi::c_char,
        Name: *const core::ffi::c_char,
    ) -> FSM_FILE;
}
extern "C" {
    pub fn fsm_reg(
        Name: *const core::ffi::c_char,
        Read: fsm_cmd_read_t,
        Write: fsm_cmd_write_t,
        Info: fsm_cmd_info_t,
        Create: fsm_cmd_create_t,
        Delete: fsm_cmd_delete_t,
        Dir: fsm_cmd_dir_t,
        Label: fsm_cmd_label_t,
        Detect: fsm_cmd_detect_t,
    );
}
extern "C" {
    pub fn fsm_delete(
        FIndex: core::ffi::c_int,
        DIndex: core::ffi::c_char,
        Name: *const core::ffi::c_char,
        Mode: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fsm_create(
        FIndex: core::ffi::c_int,
        DIndex: core::ffi::c_char,
        Name: *const core::ffi::c_char,
        Mode: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fsm_dump(file: FSM_FILE);
}
extern "C" {
    pub fn fsm_dir(
        FIndex: core::ffi::c_int,
        DIndex: core::ffi::c_char,
        Name: *const core::ffi::c_char,
        out: *mut FSM_DIR,
    );
}
extern "C" {
    pub fn fsm_isPathToFile(
        Path: *const core::ffi::c_char,
        Name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fsm_dpm_update(Letter: core::ffi::c_char);
}
